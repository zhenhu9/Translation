PARAMETERS		参数
       A  parameter is an entity that stores values.  It can be a name, a num-
       ber, or one of the special characters listed below under Special Param-
       eters.   A variable is a parameter denoted by a name.  A variable has a
       value and zero or more attributes.  Attributes are assigned  using  the
       declare  builtin command (see declare below in SHELL BUILTIN COMMANDS).

	参数是存储值的实体。 它可以是在 Special Parameters 下列出的名称，数字或特殊字符之一。 变量是由名称表示的参数。 变量具有值和零个或多个属性。 使用内置命令 declare 分配属性（请参阅下面的 SHELL BUILTIN 命令中的 declare）。

       A parameter is set if it has been assigned a value.  The null string is
       a  valid  value.  Once a variable is set, it may be unset only by using
       the unset builtin command (see SHELL BUILTIN COMMANDS below).

	如果已为参数分配了值，则会设置了该参数。 空字符串是有效值。 设置变量后，只能使用内置命令 unset 取消设置（参阅下面的 SHELL BUILTIN COMMANDS）。

       A variable may be assigned to by a statement of the form
	变量可以通过声明的形式赋值

              name=[value]

       If value is not given, the variable is assigned the null  string.   All
       values  undergo tilde expansion, parameter and variable expansion, com-
       mand substitution, arithmetic expansion, and quote removal (see  EXPAN-
       SION below).  If the variable has its integer attribute set, then value
       is evaluated as an arithmetic expression even if the $((...)) expansion
       is  not  used  (see Arithmetic Expansion below).  Word splitting is not
       performed, with the exception of "$@" as explained below under  Special
       Parameters.   Pathname  expansion  is not performed.  Assignment state-
       ments may also appear as arguments  to  the  alias,  declare,  typeset,
       export, readonly, and local builtin commands.

	如果未给出值，则为变量赋值空字符串。 所有值都经过波浪号扩展，参数和变量扩展，命令替换，算术扩展和引用删除（请参阅下面的 EXPANSION）。 如果变量设置了整数属性，则即使未使用 $((...)) 扩展，也会对值以算术表达式计算（请参阅下面的 Arithmetic Expansion）。 除了 “$@” 之外，不执行词拆分，如下面 Special Parameters 下所述。 不执行路径名扩展。 赋值语句也可以作为 alias，declare，typeset，export，readonly，和 local 内置命令的参数出现。

       In  the context where an assignment statement is assigning a value to a
       shell variable or array index, the += operator can be used to append to
       or add to the variable’s previous value.  When += is applied to a vari-
       able for which the integer attribute has been set, value  is  evaluated
       as  an arithmetic expression and added to the variable’s current value,
       which is also evaluated.  When += is applied to an array variable using
       compound  assignment  (see  Arrays  below), the variable’s value is not
       unset (as it is when using =), and new values are appended to the array
       beginning  at  one  greater than the array’s maximum index (for indexed
       arrays) or added as additional key-value pairs in an associative array.
       When  applied  to  a  string-valued  variable,  value  is  expanded and
       appended to the variable’s value.

	在赋值声明给 shell 变量或数组索引赋值的情况下，可以使用 += 运算符追加或添加到变量的前值。 当 += 应用于已设置整数属性的变量时，对值进行算术表达式计算并将其加到变量的当前值，该值也会被计算。 当使用复合赋值将 += 应用于数组变量时（请参阅下面的 Arrays），变量的值不会被取消设置（就像使用 = 时一样），并且新值将从数组的大于数组最大索引（对于索引数组）1 处添加，或作为关联数组中的附加键值对添加。 应用于字符串值变量时，会扩展值并将其附加到变量的值。

   Positional Parameters	位置参数
       A positional parameter is a parameter denoted by one  or  more  digits,
       other than the single digit 0.  Positional parameters are assigned from
       the shell’s arguments when it is invoked, and may be  reassigned  using
       the  set builtin command.  Positional parameters may not be assigned to
       with assignment statements.  The positional parameters are  temporarily
       replaced when a shell function is executed (see FUNCTIONS below).

	位置参数是由一个或多个数字表示的参数，而不是单个数字 0。 位置参数在 shell 调用参数时分配，并且可以使用内置命令 set 重新分配。 可以不使用赋值语句将位置参数分配给它们。 执行 shell 函数时，临时替换位置参数（参见下面的 FUNCTIONS）。

       When  a  positional parameter consisting of more than a single digit is
       expanded, it must be enclosed in braces (see EXPANSION below).

	当由多个数字组成的位置参数展开时，必须将其括在大括号中（参见下面的 EXPANSION）。

   Special Parameters		特殊参数
       The shell treats several parameters specially.   These  parameters  may
       only be referenced; assignment to them is not allowed.

	shell 特殊对待几个参数。 这些参数只能被引用；不允许对它们赋值。

       *      Expands  to  the positional parameters, starting from one.  When
              the expansion occurs within double quotes, it expands to a  sin-
              gle word with the value of each parameter separated by the first
              character of the IFS special variable.  That is, "$*" is equiva-
              lent to "$1c$2c...", where c is the first character of the value
              of the IFS variable.  If IFS is unset, the parameters are  sepa-
              rated  by  spaces.   If  IFS  is null, the parameters are joined
              without intervening separators.

		从 1 开始扩展位置参数。 当扩展发生在双引号内时，它会扩展为单个单词，每个参数的值由 IFS 特殊变量的第一个字符分隔。 也就是说，“$*” 相当于 “$1c$2c...”，其中 c 是 IFS 变量值的第一个字符。 如果未设置 IFS，则参数由空格分隔。 如果 IFS 为 null，则连接参数时不会插入分隔符。

       @      Expands to the positional parameters, starting from  one.   When
              the  expansion  occurs  within  double  quotes,  each  parameter
              expands to a separate word.  That is, "$@" is equivalent to "$1"
              "$2"  ...   If the double-quoted expansion occurs within a word,
              the expansion of the first parameter is joined with  the  begin-
              ning  part  of  the original word, and the expansion of the last
              parameter is joined with the last part  of  the  original  word.
              When  there  are no positional parameters, "$@" and $@ expand to
              nothing (i.e., they are removed).

		从 1 开始扩展为位置参数。 当扩展发生在双引号内时，每个参数都会扩展为单独的单词。 也就是说，“$@” 相当于 “$1” “$2” ... 如果双引号扩展发生在一个词中，则第一个参数的扩展与原词的开头部分连接，并且最后一个参数的扩展与原词的最后部分连接在一起。 当没有位置参数时，“$@”和 $@ 展开为空（即，移除它们）。

       #      Expands to the number of positional parameters in decimal.
		扩展为位置参数的十进制数量。

       ?      Expands to the exit status of the most recently  executed  fore-
              ground pipeline.

		扩展为最近执行的前台管道的退出状态。
			  
       -      Expands  to  the  current option flags as specified upon invoca-
              tion, by the set builtin command, or  those  set  by  the  shell
              itself (such as the -i option).

		扩展为调用时指定的当前选项标志，内置命令 set 或 shell 本身设置的那些选项（例如 -i 选项）。

       $      Expands  to  the  process ID of the shell.  In a () subshell, it
              expands to the process ID of the current  shell,  not  the  sub-
              shell.

		扩展为 shell 的进程 ID。 在 () 子 shell 中，它扩展为当前 shell 的进程 ID，而不是子 shell。

       !      Expands  to  the  process ID of the most recently executed back-
              ground (asynchronous) command.

		扩展为最近执行的后台（异步）命令的进程 ID。

       0      Expands to the name of the shell or shell script.  This  is  set
              at shell initialization.  If bash is invoked with a file of com-
              mands, $0 is set to the name of that file.  If bash  is  started
              with  the  -c option, then $0 is set to the first argument after
              the string to be executed, if one is present.  Otherwise, it  is
              set  to  the file name used to invoke bash, as given by argument
              zero.

		扩展为 shell 或 shell 脚本的名称。 这是在 shell 初始化时设置的。 如果使用命令文件调用 bash，则将 $0 设置为该文件的名称。 如果使用 -c 选项启动 bash，则将 $0 设置为要执行的字符串之后的第一个参数（如果存在）。 否则，它被设置为用于调用 bash 的文件名，如参数 0 所示。
