ALIASES			别名
       Aliases allow a string to be substituted for a word when it is used  as
       the  first  word  of  a  simple command.  The shell maintains a list of
       aliases that may be set and unset with the alias  and  unalias  builtin
       commands  (see  SHELL  BUILTIN COMMANDS below).  The first word of each
       simple command, if unquoted, is checked to see if it has an alias.   If
       so,  that word is replaced by the text of the alias.  The characters /,
       $, `, and = and any of the shell metacharacters or  quoting  characters
       listed above may not appear in an alias name.  The replacement text may
       contain any valid shell input,  including  shell  metacharacters.   The
       first  word  of  the replacement text is tested for aliases, but a word
       that is identical to an alias being expanded is not expanded  a  second
       time.   This  means  that  one may alias ls to ls -F, for instance, and
       bash does not try to recursively expand the replacement text.   If  the
       last  character  of  the  alias value is a blank, then the next command
       word following the alias is also checked for alias expansion.

	别名允许在将其用作简单命令的第一个词时用字符串代替词元。 shell 维护一个别名列表，可以使用内置命令 alias 和 unalias 设置和取消设置别名（参阅下面的 SHELL BUILTIN COMMANDS）。如果没有被引号括起，则检查每个简单命令的第一个词元，以查看其是否是别名。如果是这样，该词元将被别名的文本替换。字符 /，$，` 和 = 以及任何 shell 元字符，或上面列出的引用字符可能不会出现在别名名称中。替换文本可以包含任何有效的 shell 输入，包括 shell 元字符。替换文本的第一个词元测试别名，但是与扩展的别名相同的词元不会第二次扩展。这意味着，例如，可以 alias ls 为 ls -F，而 bash 不会尝试以递归方式扩展替换文本。如果 alias 值的最后一个字符为空白字符，则还会检查别名后面的下一个命令 word 的别名扩展。

       Aliases are created and listed with the alias command, and removed with
       the unalias command.

	使用 alias 命令创建并列出别名，并使用 unalias 命令删除别名。

       There  is no mechanism for using arguments in the replacement text.  If
       arguments are needed, a shell function should be  used  (see  FUNCTIONS
       below).

	在替换文本中没有使用参数的机制。 如果需要参数，则应使用 shell 函数（参见下面的 FUNCTIONS）。

       Aliases  are not expanded when the shell is not interactive, unless the
       expand_aliases shell option is set using shopt (see the description  of
       shopt under SHELL BUILTIN COMMANDS below).

	非交互式 shell，别名不会扩展，除非使用 shopt 设置 expand_aliases shell 选项（请参阅下面的 SHELL BUILTIN COMMANDS 以下的 shopt 说明）。

       The  rules  concerning  the  definition and use of aliases are somewhat
       confusing.  Bash always reads at  least  one  complete  line  of  input
       before  executing  any  of  the  commands  on  that  line.  Aliases are
       expanded when a command is read, not when it is  executed.   Therefore,
       an  alias definition appearing on the same line as another command does
       not take effect until the next line of input  is  read.   The  commands
       following the alias definition on that line are not affected by the new
       alias.  This behavior is also an issue  when  functions  are  executed.
       Aliases  are  expanded when a function definition is read, not when the
       function is executed, because a function definition is  itself  a  com-
       pound command.  As a consequence, aliases defined in a function are not
       available until after that function is executed.  To  be  safe,  always
       put  alias definitions on a separate line, and do not use alias in com-
       pound commands.

	关于别名的定义和使用的规则有些令人困惑。 在执行该行上的任何命令之前，Bash 始终会读取至少一个完整的输入行。 读取命令时会扩展别名，而不会在执行时扩展别名。 因此，在读取下一行输入之前，出现在同一行上的另一个命令的别名定义不会生效。 同行上的别名定义不会影响后面的命令。 执行函数时，此行为也是一个问题。 读取函数定义时会扩展别名，而不是在执行函数时扩展别名，因为函数定义本身就是复合命令。 因此，在执行该函数之后，函数中定义的别名才可用。 为安全起见，请始终将别名定义放在单独的行中，并且不要在复合命令中使用别名。

       For almost every purpose, aliases are superseded by shell functions.
	几乎在所有用途上，别名都可以被 shell 函数替代。
