HISTORY EXPANSION										历史纪录扩展
       The  shell  supports a history expansion feature that is similar to the
       history expansion in csh.  This section describes what syntax  features
       are  available.   This  feature  is  enabled by default for interactive
       shells, and can be disabled using the +H option to the set builtin com-
       mand (see SHELL BUILTIN COMMANDS below).  Non-interactive shells do not
       perform history expansion by default.
	   
	   shell 支持历史记录扩展功能，类似于 csh 中的历史记录扩展。 本节介绍可用的语法功能。 对于交互式 shell，此功能默认启用，可以使用内置命令 set 的 +H 选项禁用此功能（请参阅下面的 SHELL BUILTIN COMMANDS）。 默认情况下，非交互式 shell 不会执行历史记录扩展。

       History expansions introduce words from the history list into the input
       stream,  making  it  easy to repeat commands, insert the arguments to a
       previous command into the current input line, or fix errors in previous
       commands quickly.
	   
	   历史记录扩展将历史列表中的单词引入输入流，从而可以轻松地重复命令，将前一个命令的参数插入当前输入行，或者快速修复先前命令中的错误。

       History  expansion  is  performed  immediately after a complete line is
       read, before the shell breaks it into words.  It  takes  place  in  two
       parts.   The  first is to determine which line from the history list to
       use during substitution.  The second is to select portions of that line
       for inclusion into the current one.  The line selected from the history
       is the event, and the portions of that line that  are  acted  upon  are
       words.   Various  modifiers  are  available  to manipulate the selected
       words.  The line is broken into words in the same fashion as when read-
       ing  input, so that several metacharacter-separated words surrounded by
       quotes are considered one word.  History expansions are  introduced  by
       the  appearance  of  the  history  expansion  character,  which is ! by
       default.  Only backslash (\) and single quotes can  quote  the  history
       expansion character.
	   
	   在读取完整行之后，在 shell 将其分解为词元之前，立即执行历史记录扩展。 它分两部分进行。 首先是确定在替换时使用历史列表中的哪一行。 然后是选择该行的部分以包含在当前行中。 从历史记录中选择的行是事件，并且该行中采取行动的部分是词。 各种修饰符可用于操作所选词。 该行以与读取输入时相同的方式被分成词，因此被引号括起的几个由元字符分隔的单词被认为是一个词。 历史扩展是由历史扩展字符的出现引入的，默认情况下 !。 只有反斜杠（\）和单引号才能引用历史记录扩展字符。

       Several  characters inhibit history expansion if found immediately fol-
       lowing the history expansion character, even if it is unquoted:  space,
       tab,  newline,  carriage return, and =.  If the extglob shell option is
       enabled, ( will also inhibit expansion.
	   
	   如果在历史扩展字符之后立即找到几个字符，则会禁止历史扩展，即使它没有被引号括起：空格，制表符，换行符，回车符和 =。 如果启用了 shell 选项 extglob ，( 也将禁止扩展。

       Several shell options settable with the shopt builtin may  be  used  to
       tailor  the  behavior  of  history  expansion.  If the histverify shell
       option is enabled (see the description of the shopt builtin below), and
       readline  is  being  used,  history  substitutions  are not immediately
       passed to the shell parser.  Instead, the  expanded  line  is  reloaded
       into the readline editing buffer for further modification.  If readline
       is being used, and the histreedit shell option  is  enabled,  a  failed
       history  substitution will be reloaded into the readline editing buffer
       for correction.  The -p option to the history builtin  command  may  be
       used  to  see what a history expansion will do before using it.  The -s
       option to the history builtin may be used to add commands to the end of
       the  history  list  without  actually  executing them, so that they are
       available for subsequent recall.
	   
	   可以使用内置命令 shopt 可设置的几个 shell 选项来定制历史扩展的行为。 如果启用了 shell 选项 histverify（请参阅下面内置命令 shopt 的说明），并且正在使用 readline，则历史记录替换不会立即传递给 shell 解析器。 而是将展开的行重新加载到 readline 编辑缓冲区中，以进行进一步修改。 如果正在使用 readline，并且启用了 shell 选项 histreedit，则会将失败的历史记录替换重新加载到 readline 编辑缓冲区中，以进行更正。 内置命令 history 的 -p 选项可用于查看历史扩展在使用之前将执行的操作。 内置命令 history 的 -s 选项，可用于将命令添加到历史列表的末尾，而不实际执行它们，以便它们可用于后续调用。

       The shell allows control of the various characters used by the  history
       expansion mechanism (see the description of histchars above under Shell
       Variables).  The shell uses the history comment character to mark  his-
       tory timestamps when writing the history file.
	   
	   shell 允许控制历史扩展机制使用的各种字符（参阅 Shell Variables 下面的 histchars 描述）。 shell 在编写历史文件时，使用历史注释字符标记历史时间戳。

   Event Designators																	事件指示符
       An  event designator is a reference to a command line entry in the his-
       tory list.
	   
	   事件指示符是对历史列表中的命令行条目的引用。

       !      Start a history substitution, except when followed by  a  blank,
              newline,  carriage return, = or ( (when the extglob shell option
              is enabled using the shopt builtin).
			  
			  启动历史记录替换，除非后跟空格，换行符，回车符，= 或 (（当使用内置命令 shopt 启用 shell 选项 extglob 时）。
			  
       !n     Refer to command line n.													指的是命令行 n。
       !-n    Refer to the current command line minus n.								指的是当前命令行减 n。
       !!     Refer to the previous command.  This is a synonym for ‘!-1’.				指的是前一个命令。这等同于 ‘!-1’。
       !string
              Refer to the most recent command starting with string.					指的是以 string 开头的最近的命令。
       !?string[?]
              Refer to the most recent command containing string.  The  trail-
              ing ? may be omitted if string is followed immediately by a new-
              line.
			  
			  指的是包含 string 的最近的命令。 如果 string 紧跟换行符，则可以省略尾部 ?。
			  
       ^string1^string2^
              Quick substitution.  Repeat the last command, replacing  string1
              with string2.  Equivalent to ‘‘!!:s/string1/string2/’’ (see Mod-
              ifiers below).
			  
			  快速替换。 重复上一个命令，将 string1 替换为 string2。 相当于 ‘‘!!:s/string1/string2/’’（参阅下面的 Modifiers）。
			  
       !#     The entire command line typed so far.  									到目前为止输入的整个命令行。
