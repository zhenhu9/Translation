HISTORY																					历史记录
       When  the  -o  history  option to the set builtin is enabled, the shell
       provides access to the command history, the list of commands previously
       typed.   The  value  of  the HISTSIZE variable is used as the number of
       commands to save in a history list.  The text of the last HISTSIZE com-
       mands  (default  500)  is  saved.  The shell stores each command in the
       history list prior to parameter and variable expansion  (see  EXPANSION
       above)  but after history expansion is performed, subject to the values
       of the shell variables HISTIGNORE and HISTCONTROL.
	   
	   内置命令 set 的 -o history 选项启用后，shell 将提供对命令历史记录的访问，该命令历史记录是先前键入的命令列表。 HISTSIZE 变量的值作为要保存在历史列表中的命令数。 保存最后一个 HISTSIZE 命令的文本（默认为 500）。 shell 在参数和变量扩展之前，将每个命令存储在历史列表中（参阅上面的 EXPANSION），但是在执行历史扩展之后，受 shell 变量 HISTIGNORE 和 HISTCONTROL 的值的限制。

       On startup, the history is initialized from the file named by the vari-
       able  HISTFILE  (default ~/.bash_history).  The file named by the value
       of HISTFILE is truncated, if necessary, to contain  no  more  than  the
       number  of lines specified by the value of HISTFILESIZE.  When the his-
       tory file is read, lines beginning with the history  comment  character
       followed  immediately  by a digit are interpreted as timestamps for the
       preceding history line.   These  timestamps  are  optionally  displayed
       depending  on the value of the HISTTIMEFORMAT variable.  When an inter-
       active shell exits, the last $HISTSIZE lines are copied from  the  his-
       tory list to $HISTFILE.  If the histappend shell option is enabled (see
       the description of shopt under SHELL BUILTIN COMMANDS below), the lines
       are  appended  to the history file, otherwise the history file is over-
       written.  If HISTFILE is unset, or if the history file  is  unwritable,
       the  history is not saved.  If the HISTTIMEFORMAT variable is set, time
       stamps are written to the history file, marked with the history comment
       character,  so  they may be preserved across shell sessions.  This uses
       the history comment character to distinguish timestamps from other his-
       tory lines.  After saving the history, the history file is truncated to
       contain no more than HISTFILESIZE lines.  If HISTFILESIZE is  not  set,
       no truncation is performed.
	   
	   在启动时，历史记录从变量 HISTFILE 命名的文件初始化（默认为 ~/.bash_history）。如有必要，将截断由 HISTFILE 值指定的文件，以包含不超过 HISTFILESIZE 值指定的行数。读取历史文件时，以历史注释字符开头，后面紧跟数字的行将被解释为前一个历史记录行的时间戳。可选地显示这些时间戳，具体取决于 HISTTIMEFORMAT 变量的值。当交互式 shell 退出时，最后的 $HISTSIZE 行将从历史列表复制到 $HISTFILE。如果启用了 shell 选项 histappend（请参阅下面的 SHELL BUILTIN COMMANDS 下的 shopt 说明），这些行将附加到历史文件中，否则将覆盖历史文件。如果未设置 HISTFILE，或者历史文件不可写，则不保存历史记录。如果设置了 HISTTIMEFORMAT 变量，则会将时间戳写入历史记录文件，并使用历史记录注释字符标记，因此可以跨 shell 会话保留时间戳。这使用历史注释字符来区分时间戳与其它历史记录行。保存历史记录后，历史文件将被截断为包含不超过 HISTFILESIZE 行。如果未设置 HISTFILESIZE，则不执行截断。

       The  builtin  command fc (see SHELL BUILTIN COMMANDS below) may be used
       to list or edit and re-execute a portion of the history list.  The his-
       tory  builtin  may  be  used  to display or modify the history list and
       manipulate the history file.  When using command-line  editing,  search
       commands  are available in each editing mode that provide access to the
       history list.
	   
	   内置命令 fc（参阅下面的 SHELL BUILTIN COMMANDS）可用于列出或编辑和重新执行历史列表的一部分。 内置命令 history 可用于显示或修改历史列表并操纵 history 文件。 使用命令行编辑时，在每种编辑模式下都可以使用搜索命令来访问历史列表。

       The shell allows control over which commands are saved on  the  history
       list.  The HISTCONTROL and HISTIGNORE variables may be set to cause the
       shell to save only a subset of the commands entered.  The cmdhist shell
       option,  if enabled, causes the shell to attempt to save each line of a
       multi-line command in the same history entry, adding  semicolons  where
       necessary  to preserve syntactic correctness.  The lithist shell option
       causes the shell to save the command with embedded newlines instead  of
       semicolons.  See the description of the shopt builtin below under SHELL
       BUILTIN  COMMANDS  for  information  on  setting  and  unsetting  shell
       options.
	   
	   shell 允许控制在历史列表中保存哪些命令。 可以将 HISTCONTROL 和 HISTIGNORE 变量设置为使 shell 仅保存输入的命令的子集。  shell 选项 cmdhist（如果启用）会导致 shell 尝试在同一历史记录条目中保存多行命令的每一行，并在必要时添加分号以保持语法正确性。 shell 选项 lithist 使 shell 使用嵌入的换行符而不是分号来保存命令。 有关设置和取消设置 shell 选项的信息，请参阅 SHELL BUILTIN COMMANDS 下面内置命令 shopt 的说明。

HISTORY EXPANSION																		历史纪录扩展
       The  shell  supports a history expansion feature that is similar to the
       history expansion in csh.  This section describes what syntax  features
       are  available.   This  feature  is  enabled by default for interactive
       shells, and can be disabled using the +H option to the set builtin com-
       mand (see SHELL BUILTIN COMMANDS below).  Non-interactive shells do not
       perform history expansion by default.
	   
	   shell 支持历史记录扩展功能，类似于 csh 中的历史记录扩展。 本节介绍可用的语法功能。 对于交互式 shell，此功能默认启用，可以使用内置命令 set 的 +H 选项禁用此功能（请参阅下面的 SHELL BUILTIN COMMANDS）。 默认情况下，非交互式 shell 不会执行历史记录扩展。

       History expansions introduce words from the history list into the input
       stream,  making  it  easy to repeat commands, insert the arguments to a
       previous command into the current input line, or fix errors in previous
       commands quickly.
	   
	   历史记录扩展将历史列表中的单词引入输入流，从而可以轻松地重复命令，将前一个命令的参数插入当前输入行，或者快速修复先前命令中的错误。

       History  expansion  is  performed  immediately after a complete line is
       read, before the shell breaks it into words.  It  takes  place  in  two
       parts.   The  first is to determine which line from the history list to
       use during substitution.  The second is to select portions of that line
       for inclusion into the current one.  The line selected from the history
       is the event, and the portions of that line that  are  acted  upon  are
       words.   Various  modifiers  are  available  to manipulate the selected
       words.  The line is broken into words in the same fashion as when read-
       ing  input, so that several metacharacter-separated words surrounded by
       quotes are considered one word.  History expansions are  introduced  by
       the  appearance  of  the  history  expansion  character,  which is ! by
       default.  Only backslash (\) and single quotes can  quote  the  history
       expansion character.
	   
	   在读取完整行之后，在 shell 将其分解为单词之前，立即执行历史记录扩展。 它分两部分进行。 首先是确定在替换期间使用历史列表中的哪一行。 然后是选择该行的部分以包含在当前行中。 从历史记录中选择的行是事件，并且该行的部分是单词。 各种修饰符可用于操作所选单词。 该行以与读取输入时相同的方式被分成单词，因此被引号括起的几个由元字符分隔的单词被认为是一个单词。 历史扩展是由历史扩展字符的出现引入的，默认情况下 !。 只有反斜杠（\）和单引号才能引用历史记录扩展字符。

       Several  characters inhibit history expansion if found immediately fol-
       lowing the history expansion character, even if it is unquoted:  space,
       tab,  newline,  carriage return, and =.  If the extglob shell option is
       enabled, ( will also inhibit expansion.
	   
	   如果在历史扩展字符之后立即找到几个字符，则会禁止历史扩展，即使它没有引用：空格，制表符，换行符，回车符和 =。 如果启用了 shell 选项 extglob ，( 也将禁止扩展。

       Several shell options settable with the shopt builtin may  be  used  to
       tailor  the  behavior  of  history  expansion.  If the histverify shell
       option is enabled (see the description of the shopt builtin below), and
       readline  is  being  used,  history  substitutions  are not immediately
       passed to the shell parser.  Instead, the  expanded  line  is  reloaded
       into the readline editing buffer for further modification.  If readline
       is being used, and the histreedit shell option  is  enabled,  a  failed
       history  substitution will be reloaded into the readline editing buffer
       for correction.  The -p option to the history builtin  command  may  be
       used  to  see what a history expansion will do before using it.  The -s
       option to the history builtin may be used to add commands to the end of
       the  history  list  without  actually  executing them, so that they are
       available for subsequent recall.
	   
	   可以使用内置命令 shopt 可设置的几个 shell 选项来定制历史扩展的行为。 如果启用了 shell 选项 histverify（请参阅下面内置命令 shopt 的说明），并且正在使用 readline，则历史记录替换不会立即传递给 shell 解析器。 而是将展开的行重新加载到 readline 编辑缓冲区中，以进行进一步修改。 如果正在使用 readline，并且启用了 shell 选项 histreedit，则会将失败的历史记录替换重新加载到 readline 编辑缓冲区中，以进行更正。 内置命令 history 的 -p 选项可用于查看历史扩展在使用之前将执行的操作。 内置命令 history 的 -s 选项，可用于将命令添加到历史列表的末尾，而不实际执行它们，以便它们可用于后续调用。

       The shell allows control of the various characters used by the  history
       expansion mechanism (see the description of histchars above under Shell
       Variables).  The shell uses the history comment character to mark  his-
       tory timestamps when writing the history file.
	   
	   shell 允许控制历史扩展机制使用的各种字符（参阅 Shell Variables 下面的 histchars 描述）。 shell 在编写历史文件时，使用历史注释字符标记历史时间戳。

   Event Designators																	事件指示符
       An  event designator is a reference to a command line entry in the his-
       tory list.
	   
	   事件指示符是对历史列表中的命令行条目的引用。

       !      Start a history substitution, except when followed by  a  blank,
              newline,  carriage return, = or ( (when the extglob shell option
              is enabled using the shopt builtin).
			  
			  启动历史记录替换，除非后跟空格，换行符，回车符，= 或 (（当使用内置命令 shopt 启用 shell 选项 extglob 时）。
			  
       !n     Refer to command line n.													指的是命令行 n。
       !-n    Refer to the current command line minus n.								指的是当前命令行减 n。
       !!     Refer to the previous command.  This is a synonym for ‘!-1’.				指的是前一个命令。这等同于 ‘!-1’。
       !string
              Refer to the most recent command starting with string.					指的是以 string 开头的最近的命令。
       !?string[?]
              Refer to the most recent command containing string.  The  trail-
              ing ? may be omitted if string is followed immediately by a new-
              line.
			  
			  指的是包含 string 的最近的命令。 如果 string 紧跟换行符，则可以省略尾部 ?。
			  
       ^string1^string2^
              Quick substitution.  Repeat the last command, replacing  string1
              with string2.  Equivalent to ‘‘!!:s/string1/string2/’’ (see Mod-
              ifiers below).
			  
			  快速替换。 重复上一个命令，将 string1 替换为 string2。 相当于 ‘‘!!:s/string1/string2/’’（参阅下面的 Modifiers）。
			  
       !#     The entire command line typed so far.  									到目前为止输入的整个命令行。

